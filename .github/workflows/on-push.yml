name: On Push
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:

  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    # - id: release
    #   env:
    #     GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    #   run: ${{ secrets.RELEASE_SCRIPT }}

    - run: echo "# ${{ steps.release.outputs.version}}" >> $GITHUB_STEP_SUMMARY

    # - run: cat release-notes.md >> $GITHUB_STEP_SUMMARY

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: release-notes.md
    #     path: release-notes.md

    - run: /home/linuxbrew/.linuxbrew/bin/brew install cargo-edit
      if: ${{ steps.release.outputs.version != ''}}

    - run: /home/linuxbrew/.linuxbrew/bin/cargo-set-version set-version ${{ steps.release.outputs.version }}
      if: ${{ steps.release.outputs.version != ''}}

    - run: git --no-pager diff --color

    - uses: actions/upload-artifact@v4
      with:
        name: Cargo.toml
        path: Cargo.toml


  # cargo-build:
  #   runs-on: ubuntu-latest
  #   needs:
  #   - release
  #   steps:

  #   - uses: actions/checkout@v4

  #   - name: Restore cargo cache
  #     id: cache-cargo
  #     uses: actions/cache/restore@v4
  #     with:
  #       key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #       restore-keys: |
  #         ${{ runner.os }}-cargo-
  #       path: |
  #         ~/.cargo/bin/
  #         ~/.cargo/registry/index/
  #         ~/.cargo/registry/cache/
  #         ~/.cargo/git/db/
  #         target/

  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: Cargo.toml

  #   - run: git --no-pager diff --color

  #   - name: Restore samples cache
  #     id: cache-samples
  #     uses: actions/cache@v4
  #     with:
  #      path: samples/content
  #      key: cache-samples

  #   - if: steps.cache-samples.outputs.cache-hit != 'true'
  #     run: ./samples/download-sample

  #   - run: |
  #       curl "https://github.com/casey/intermodal/releases/download/v0.1.14/imdl-v0.1.14-x86_64-unknown-linux-musl.tar.gz" \
  #         --location \
  #         --show-error \
  #         --silent \
  #       | tar \
  #         --extract \
  #         --gzip \
  #         --directory "/usr/local/bin" \
  #         --file - \
  #         "imdl"

  #   - run: sudo apt-get update

  #   - run: sudo apt-get install flac lame sox imagemagick --yes

  #   - run: cargo build --release

  #   - name: Save cargo cache
  #     id: cargo-cache-save
  #     uses: actions/cache/save@v4
  #     with:
  #       key: ${{ steps.cache-cargo.outputs.cache-primary-key }}
  #       path: |
  #         ~/.cargo/bin/
  #         ~/.cargo/registry/index/
  #         ~/.cargo/registry/cache/
  #         ~/.cargo/git/db/
  #         target/

  #   - run: rm -rf content

  #   - run: ln -s samples/content content

  #   - run: |
  #       tee config.yml <<EOF
  #       announce_url: ${{ secrets.ANNOUNCE_URL }}
  #       api_key: ${{ secrets.API_KEY }}
  #       source: ${{ secrets.SOURCE }}
  #       verbosity: trace
  #       EOF

  #   - run: touch output/cache.json

  #   - run: touch output/queue.yml

  #   - run: cargo test --release --no-fail-fast

  #   - name: Run cargo check
  #     run: |
  #       if ! cargo check --quiet --all-targets --message-format short
  #       then
  #         echo "::warning title=Cargo Check Failed::Please review the output for details."
  #       fi

  #   - name: Run cargo clippy
  #     run: |
  #       if ! cargo clippy --quiet --all-targets --message-format short
  #       then
  #         echo "::warning title=Clippy Check Failed::Please review the output for details."
  #       fi

  #   - name: Run cargo fmt
  #     run: |
  #       if ! cargo fmt --check
  #       then
  #         echo "::warning title=Format Check Failed::Please review the output for details."
  #       fi

  #   - run: git --no-pager diff --color

  #   - uses: actions/upload-artifact@v4
  #     with:
  #       name: caesura
  #       path: target/release/caesura


  # cargo-publish:
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.release.outputs.version != '' && ! contains(needs.release.outputs.version, '-') }}
  #   needs:
  #   - release
  #   - cargo-build
  #   steps:

  #   - uses: actions/checkout@v4

  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: Cargo.toml

  #   - run: git --no-pager diff --color

  #   - run: cargo publish --allow-dirty --no-verify
  #     env:
  #       CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}


  # github-release:
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.release.outputs.version != ''}}
  #   needs:
  #     - release
  #     - cargo-build
  #   steps:

  #   - uses: actions/checkout@v4

  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: release-notes.md

  #   - name: gh release create
  #     if: ${{ ! contains(needs.release.outputs.version, '-') }}
  #     env:
  #       GH_TOKEN: ${{ github.token }}
  #     run: >
  #       gh release create
  #       "v${{ needs.release.outputs.version }}"
  #       --title "v${{ needs.release.outputs.version }}"
  #       --notes-file release-notes.md
  #       --target ${{ github.ref_name }}

  #   - name: gh release create --prerelease
  #     if: ${{ contains(needs.release.outputs.version, '-') }}
  #     env:
  #       GH_TOKEN: ${{ github.token }}
  #     run: >
  #       gh release create
  #       "v${{ needs.release.outputs.version }}"
  #       --title "v${{ needs.release.outputs.version }}"
  #       --notes-file release-notes.md
  #       --target ${{ github.ref_name }}
  #       --prerelease

  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: caesura

  #   - name: gh release upload
  #     run: >
  #       gh release upload
  #       "v${{ needs.release.outputs.version }}"
  #       caesura
  #       --clobber
  #       --repo "${{ github.repository }}"
  #     env:
  #       GH_TOKEN: ${{ github.token }}


  docker-build:
    runs-on: ubuntu-latest
    # if: ${{ needs.release.outputs.version != ''}}
    needs:
    - release
    steps:

    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ github.sha }}
        restore-keys: |
          buildx-

    - run: echo $GH_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - run: docker buildx create --use

    - run: >
        docker buildx build .
        --build-arg VERSION=${{ needs.release.outputs.version }}
        --tag caesura:latest
        --cache-from=type=local,src=/tmp/.buildx-cache
        --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max
        --push

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - run: rm -rf /tmp/.buildx-cache
    - run: mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # docker-release:
  #   runs-on: ubuntu-latest
  #   needs:
  #   - release
  #   - cargo-build
  #   - docker-build
  #   steps:

  #   - run: echo $GH_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #     env:
  #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   - run: docker pull ghcr.io/rogueoneecho/caesura:${{ needs.release.outputs.version }}

  #   - run: docker tag ghcr.io/rogueoneecho/caesura:${{ needs.release.outputs.version }} ghcr.io/rogueoneecho/caesura:${{ github.ref_name }}
  #     if: ${{ github.ref_name == 'alpha' }}

  #   - run: docker push ghcr.io/rogueoneecho/caesura:${{ github.ref_name }}
  #     if: ${{ github.ref_name == 'alpha' }}

  #   - run: docker tag ghcr.io/rogueoneecho/caesura:${{ needs.release.outputs.version }} ghcr.io/rogueoneecho/caesura:latest
  #     if: ${{ ! contains(needs.release.outputs.version, '-') }}

  #   - run: docker push ghcr.io/rogueoneecho/caesura:latest
  #     if: ${{ ! contains(needs.release.outputs.version, '-') }}
